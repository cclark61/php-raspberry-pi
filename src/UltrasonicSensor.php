<?php
//*****************************************************************************
//*****************************************************************************
/**
 * Ultrasonic Sensor Class (HC-SR04)
 *
 * @package         Cclark61\RPi
 * @author          Christian J. Clark
 * @copyright       Christian J. Clark
 * @link            https://github.com/cclark61/php-raspberry-pi
 **/
//*****************************************************************************
//*****************************************************************************

namespace Cclark61\RPi;

class UltrasonicSensor
{
    //=========================================================================
    // Class Members
    //=========================================================================
    protected $trigger_pin = false;
    protected $echo_pin = false;
    protected $settle_secs = 2;

    //=========================================================================
    //=========================================================================
    // Constructor
    //=========================================================================
    //=========================================================================
    public function __construct(Array $args=[])
    {
        //-------------------------------------------------------------
        // Extract Args
        //-------------------------------------------------------------
        $trigger_pin = false;
        $echo_pin = false;
        extract($args);

        //-------------------------------------------------------------
        // App Config
        //-------------------------------------------------------------
        $app_config = new \phpOpenFW\Core\AppConfig();

        //-------------------------------------------------------------
        // Trigger Pin
        //-------------------------------------------------------------
        if (empty($trigger_pin) && !empty($app_config->trigger_pin)) {
            $trigger_pin = $app_config->trigger_pin;
        }
        if (empty($trigger_pin) || !is_int($trigger_pin)) {
            throw new \Exception('Invalid or no value given for trigger pin.');
        }
        $this->trigger_pin = $trigger_pin;
        if (defined('VERBOSE') && VERBOSE) {
            print "-> Trigger pin is {$this->trigger_pin}.\n";
        }

        //-------------------------------------------------------------
        // Echo Pin
        //-------------------------------------------------------------
        if (empty($echo_pin) && !empty($app_config->echo_pin)) {
            $echo_pin = $app_config->echo_pin;
        }
        if (empty($echo_pin) || !is_int($echo_pin)) {
            throw new \Exception('Invalid or no value given for echo pin.');
        }
        $this->echo_pin = $echo_pin;
        if (defined('VERBOSE') && VERBOSE) {
            print "-> Echo pin is {$this->echo_pin}.\n";
        }

        //-------------------------------------------------------------
        // Settle Time in Seconds
        //-------------------------------------------------------------
        if (isset($settle_time) && is_int($settle_time) && $settle_time >= 0 && $settle_time <= 10) {
            $this->settle_secs = $settle_time;
        }
        if (defined('VERBOSE') && VERBOSE) {
            print "-> Settle Time is {$this->settle_secs} seconds.\n";
        }
    }

    //=========================================================================
    //=========================================================================
    // Measure Distance
    //=========================================================================
    //=========================================================================
    public function MeasureDistance(Array $args=[])
    {
        //-------------------------------------------------------------
        // Setup
        //-------------------------------------------------------------
        $this->Setup($args);

        //-------------------------------------------------------------
        // Send Pulse
        //-------------------------------------------------------------
        $this->SendPulse($args);

        //-------------------------------------------------------------
        // Read Pulse
        //-------------------------------------------------------------
        return $this->ReadPulse($args);
    }

    //=========================================================================
    //=========================================================================
    // Send Pulse from Trigger Pin
    //=========================================================================
    //=========================================================================
    public function SendPulse(Array $args=[])
    {
        //-------------------------------------------------------------
        // Defaults / Extract Args
        //-------------------------------------------------------------
        $sleep_microseconds = 1000;
        extract($args);

        //-------------------------------------------------------------
        // Send Signal from Trigger Pin
        //-------------------------------------------------------------
        GPIO::PinWrite($this->trigger_pin, 1);

        //-------------------------------------------------------------
        // Sleep while trigger pin is on...
        //-------------------------------------------------------------
        usleep($sleep_microseconds);

        //-------------------------------------------------------------
        // Turn Off Trigger Pin
        //-------------------------------------------------------------
        GPIO::PinWrite($this->trigger_pin, 0);
    }

    //=========================================================================
    //=========================================================================
    // Read Pulse from Echo Pin
    //=========================================================================
    //=========================================================================
    public function ReadPulse(Array $args=[])
    {
        //-------------------------------------------------------------
        // While echo pin is 0, set start time
        //-------------------------------------------------------------
        while(!GPIO::PinRead($this->echo_pin)) {
            $start_time = hrtime(true);
        }

        //-------------------------------------------------------------
        // Wait for Echo / Get Stop Time
        //-------------------------------------------------------------
        while(GPIO::PinRead($this->echo_pin)) {
            $stop_time = hrtime(true);
        }

        //-------------------------------------------------------------
        // Start return data
        //-------------------------------------------------------------
        $return_data = [];

        //-------------------------------------------------------------
        // Calculate Time
        //-------------------------------------------------------------
        $trav_time_ms = ($stop_time - $start_time) / 1e+6;
        $trav_time_sec = $trav_time_ms / 1000;

        //-------------------------------------------------------------
        // Calculate Distance
        //-------------------------------------------------------------
        $distance = round(17150 * $trav_time_sec, 2);
        print '-> Distance = ' . $distance . " cm\n\n";

        //-------------------------------------------------------------
        // Return Data
        //-------------------------------------------------------------
        return [
            'time' => [
                'ms' => $trav_time_ms,
                'sec' => $trav_time_sec
            ],
            'distance' => [
                'cm' => $distance,
                'inches' => round($distance * 0.3937008, 2)
            ]
        ];
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Internal / Protected Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //=========================================================================
    //=========================================================================
    // Setup
    //=========================================================================
    //=========================================================================
    protected function Setup(Array $args=[])
    {
        //-------------------------------------------------------------
        // Set Pin Modes
        //-------------------------------------------------------------
        GPIO::SetInputMode($this->trigger_pin, 'out');
        GPIO::SetInputMode($this->echo_pin, 'in');

        //-------------------------------------------------------------
        // Set trigger pin to 0 to reset
        //-------------------------------------------------------------
        GPIO::PinWrite($this->trigger_pin, 0);
        if (defined('VERBOSE') && VERBOSE) {
            print "-> Waiting for sensor to settle...";
        }
        sleep($this->settle_secs);
        if (defined('VERBOSE') && VERBOSE) {
            print "Done.\n";
        }

        
    }
}
