<?php
//*****************************************************************************
//*****************************************************************************
/**
 * GPIO Class
 *
 * @package         Cclark61\RPi
 * @author          Christian J. Clark
 * @copyright       Christian J. Clark
 * @link            https://github.com/cclark61/php-raspberry-pi
 **/
//*****************************************************************************
//*****************************************************************************

namespace Cclark61\RPi;

class GPIO
{
    //=========================================================================
    // Class Members
    //=========================================================================
    protected static $valid_pins = [7, 0, 2, 3, 21, 22, 23, 25, 1, 4, 5, 6, 26, 27];
    protected static $pin_modes = [];

    //=========================================================================
    //=========================================================================
    // Set Inputs Mode
    //=========================================================================
    //=========================================================================
    public static function ValidatePin($pin, Array $args=[])
    {
        $exit_on_error = true;
        extract($args);
        if (!is_scalar($pin) || !is_integer($pin)) {
            if ($exit_on_error) {
                die("\n[!!]Error: Invalid value given for pin.\n");
            }
        }
        else if (!in_array($pin, static::$valid_pins)) {
            if ($exit_on_error) {
                die("\n[!!]Error: Pin '{$pin}' is not a valid pin number.\n");
            }
        }
        return true;
    }

    //=========================================================================
    //=========================================================================
    // Set Inputs Mode
    //=========================================================================
    //=========================================================================
    public static function SetInputMode($input, $mode, Array $args=[])
    {
        //---------------------------------------------------------------------
        // Validate Pin Input
        //---------------------------------------------------------------------
        static::ValidatePin($input);

        //---------------------------------------------------------------------
        // Defaults / Extract Args
        //---------------------------------------------------------------------
        $verbose = false;
        extract($args);
        $str_mode = strtolower($mode);

        //---------------------------------------------------------------------
        // Convert Text Pin Mode to Integer
        //---------------------------------------------------------------------
        if (!is_int($str_mode)) {
            if ($str_mode == 'out') {
                $mode = 1;
            }
            else if ($str_mode == 'in') {
                $mode = 2;
            }
            else if ($str_mode == 'pwm') {
                $mode = 3;
            }
            else {
                $mode = 0;
            }
        }

        //---------------------------------------------------------------------
        // Set Pin Mode
        //---------------------------------------------------------------------
        // 0 = Off (?)
        // 1 = OUPUT
        // 2 = INPUT (?)
        // 3 = PWM (?)
        //---------------------------------------------------------------------
        //system("gpio mode {$input} {$mode}"); // !!! SLOW
        \wiringpi::pinMode($input, $mode);
        static::$pin_modes[$input] = $mode;
        if ($verbose) {
            print "\n[i] Pin #{$input} mode -> '{$str_mode}'.";
        }
    }

    //=========================================================================
    //=========================================================================
    // Set Inputs Mode
    //=========================================================================
    //=========================================================================
    public static function SetInputsMode(Array $inputs, $mode, Array $args=[])
    {
        //---------------------------------------------------------------------
        // Defaults / Extract Args
        //---------------------------------------------------------------------
        $verbose = false;
        extract($args);

        //---------------------------------------------------------------------
        // Validate Pin Inputs
        //---------------------------------------------------------------------
        foreach ($inputs as $input) {
            static::ValidatePin($input);
        }

        //---------------------------------------------------------------------
        // Set Pin Modes
        //---------------------------------------------------------------------
        if ($verbose) {
            print "\n[i] Setting pin modes...";
        }
        foreach ($inputs as $input) {
            static::SetInputMode($input, $mode, $args);
        }
        if ($verbose) {
            print "\nDone.\n";
        }
    }

    //=========================================================================
    //=========================================================================
    // Turn Off All GPIO Inputs
    //=========================================================================
    //=========================================================================
    public static function TurnOffAll(Array $args=[])
    {
        //---------------------------------------------------------------------
        // Defaults / Extract Args
        //---------------------------------------------------------------------
        $inputs = static::$valid_pins;
        $verbose = false;
        extract($args);

        //---------------------------------------------------------------------
        // Turn Off Inputs
        //---------------------------------------------------------------------
        if ($verbose) {
            print "\n[i] Turning off inputs...";
        }
        foreach ($inputs as $input) {
            if ($verbose) {
                print "\nPin {$input}...";
            }
            static::PinWrite($input, 0, $args);
            if ($verbose) {
                print "Off.";
            }
        }
        if ($verbose) {
            print "\nDone.\n";
        }
    }

    //=========================================================================
    //=========================================================================
    // Cycle GPIO Pin
    //=========================================================================
    //=========================================================================
    public static function CyclePin($pin, $val, Array $args=[])
    {
        if ($val != 0 && $val != 1) {
            static::ExitWithError('Invalid pin value. Valid values are 0 or 1.');
        }
        $val2 = ($val == 1) ? (0) : (1);
        $sleep = 100;
        extract($args);
        if (!empty($args['debug'])) {
            print "\n-> Cycle Pin: {$pin}, Val: {$val}, Sleep: {$sleep}\n";
        }
        static::PinWrite($pin, $val, $args);
        usleep($sleep);
        static::PinWrite($pin, $val2, $args);
    }

    //=========================================================================
    //=========================================================================
    // Pin Write
    //=========================================================================
    //=========================================================================
    public static function PinWrite($pin, $val, Array $args=[])
    {
        if ($val != 0 && $val != 1) {
            static::ExitWithError('Invalid pin value. Valid values are 0 or 1.');
        }
        if (!empty($args['debug'])) {
            print "\n-> Pin Write: {$pin}: {$val}\n";
        }
        //system("gpio write {$pin} {$val}"); // !!! SLOW
        \wiringpi::digitalWrite($pin, $val);
        return true;
    }

    //=========================================================================
    //=========================================================================
    // Pin Read
    //=========================================================================
    //=========================================================================
    public static function PinRead($pin, Array $args=[])
    {
        if (!empty($args['debug'])) {
            print "\n-> Pin Write: {$pin}: {$val}\n";
        }
        //system("gpio read {$pin}"); // !!! SLOW
        return \wiringpi::digitalRead($pin);
    }

}
